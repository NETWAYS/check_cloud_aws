template CheckCommand "cloud_aws" {
    command = [ PluginDir + "/check_cloud_aws" ]

    arguments = {
        "-t" = {
            value = "$cloud_aws_timeout$"
            description = "Timeout for the check (default 30)"
        }
        "-P" = {
            value= "$cloud_aws_profile$"
            description = "The AWS profile name, which represents a separate credential profile in the credential file (default 'default')"
        }
        "-R" = {
            value = "$cloud_aws_region$"
            description = "The AWS region to send requests to (default 'eu-central-1')"
        }
        "-C" = {
            value= "$cloud_aws_credentials$"
            description = "Path to the credentials file (default '$HOME/.aws/credentials')"
        }
    }
}

object CheckCommand "cloud_aws_instance" {
    import "cloud_aws"

    command += [ "ec2", "instance" ]

    arguments += {
        "-i" = {
            value = "$cloud_aws_ec2_instance_id$"
            description = "Look for ec2 instance by id"
        }
        "-n" = {
            value = "$cloud_aws_ec2_instance_name$"
            description = "Look for ec2 instance by name"
        }
    }
}

object CheckCommand "cloud_aws_instances" {
    import "cloud_aws"

    command += [ "ec2", "instances" ]

    arguments += {
        "-n" = {
            value = "$cloud_aws_ec2_instances_name$"
            description = "Search for ec2 instances by name (e.g. instance*)"
        }
        "-a" = {
            value = "$cloud_aws_ec2_instances_autoscale$"
            description = "Search for ec2 instances by autoscaling group"
        }
    }
}

object CheckCommand "cloud_aws_cloudfront" {
    import "cloud_aws"

    command += [ "cloudfront" ]

    arguments += {
        "-e" = {
            value = "$cloud_aws_etag$"
            description = "Etag name of one or multiple distributions. If no etag is given, all distributions will be evaluated"
        }
    }
}

object CheckCommand "cloud_aws_s3_bucket" {
    import "cloud_aws"

    command += [ "s3", "bucket" ]

    arguments += {
        "-b" = {
            value = "$cloud_aws_s3_buckets$"
            repeat_key = true
            description = "Name of the S3 bucket. If no bucket is given, all buckets will be evaluated"
        }
        "-c" = {
            value = "$cloud_aws_s3_buckets_crit_size$"
            description = "Critical threshold for the size of the specified bucket. Alerts if the size is greater than the critical threshold (default '20Gb')"
        }
        "-w" = {
             value = "$cloud_aws_s3_buckets_warn_size$"
             description = "Warning threshold for the size of the specified bucket. Alerts if the size is greater than the warning threshold (default '10Gb')"
        }
        "--empty-ok" = {
            set_if = "$cloud_aws_s3_buckets_empty_ok$"
            description = "Return OK if there are no buckets (default false)"
        }
    }
}

object CheckCommand "cloud_aws_s3_object" {
    import "cloud_aws"

    command += [ "s3", "object" ]

    arguments += {
        "-b" = {
            value = "$cloud_aws_s3_object_bucket$"
            repeat_key = true
            description = "Name of the S3 bucket. If --buckets is empty, all buckets will be evaluated"
        }
        "-c" = {
            value = "$cloud_aws_s3_object_crit_size$"
            description = "Critical threshold for the size of the specified bucket. Alerts if the size is greater than the critical threshold (default '800mb')"
        }
        "-w" = {
             value = "$cloud_aws_s3_object_warn_size$"
             description = "Warning threshold for the size of the specified bucket. Alerts if the size is greater than the warning threshold (default '1gb')"
        }
        "--prefix" = {
            value = "$cloud_aws_s3_object_prefix$"
            description = "Limits the response to keys that begin with the specified prefix"
        }
        "-p" = {
            set_if = "$cloud_aws_s3_object_perfdata$"
            description = "Displays perfdata and lists all objects in the specified bucket (default false)"
        }
        "--empty-ok" = {
            set_if = "$cloud_aws_s3_object_empty_ok$"
            description = "Return OK if there are no buckets (default false)"
        }
    }
}

object CheckCommand "cloud_aws_status" {
    import "cloud_aws"

    command += [ "status" ]

    arguments += {
        "-u" = {
            value = "$cloud_aws_status_url$"
            description = "The AWS Status Page URL (default 'https://status.aws.amazon.com')"
        }
        "-s" = {
            value = "$cloud_aws_status_service$"
            description = "The AWS Service to check (default 'ec2')"
        }
    }
}

apply Service "cloud_aws_single_instance_example" {
    import "generic-service"

    check_command = "cloud_aws_instance"

    vars.cloud_aws_ec2_instance_name = "IcingaMaster"

    assign where host.name == NodeName
}

apply Service "cloud_aws_multiple_instances_example" {
    import "generic-service"

    check_command = "cloud_aws_instances"

    assign where host.name == NodeName
}

apply Service "cloud_aws_cloudfront_example" {
    import "generic-service"

    check_command = "cloud_aws_cloudfront"

    assign where host.name == NodeName
}

apply Service "cloud_aws_s3_bucket_example" {
    import "generic-service"

    check_command = "cloud_aws_s3_bucket"

    vars.cloud_aws_s3_buckets_crit_size = "10G"
    vars.cloud_aws_s3_buckets_warn_size = "5G"

    assign where host.name == NodeName
}

apply Service "cloud_aws_s3_object_example" {
    import "generic-service"

    check_command = "cloud_aws_s3_object"

    vars.cloud_aws_s3_object_prefix = "file"
    vars.cloud_aws_s3_object_bucket = [ "foo", "bar" ]

    assign where host.name == NodeName
}

apply Service "cloud_aws_status_example" {
    import "generic-service"

    check_command = "cloud_aws_status"

    vars.cloud_aws_status_url = "https://status.aws.amazon.com"
    vars.cloud_aws_status_service = "cloudwatch"

    assign where host.name == NodeName
}
